{"version":3,"sources":["hooks/useIsMountedRef.js","../node_modules/@material-ui/core/esm/Card/Card.js","../node_modules/@material-ui/core/esm/CardContent/CardContent.js","utils/wait.js","views/management/CustomerEditView/CustomerEditForm.js","views/management/CustomerEditView/Header.js","views/management/CustomerEditView/index.js"],"names":["useIsMountedRef","isMounted","useRef","useEffect","current","Card","React","props","ref","classes","className","_props$raised","raised","other","_objectWithoutProperties","Paper","_extends","clsx","root","elevation","withStyles","overflow","name","CardContent","_props$component","component","Component","padding","paddingBottom","wait","time","Promise","res","setTimeout","useStyles","makeStyles","CustomerEditForm","customer","rest","enqueueSnackbar","useSnackbar","initialValues","address1","address2","country","discountedPrices","email","fullName","phone","state","verified","validationSchema","Yup","shape","max","required","onSubmit","values","a","resetForm","setErrors","setStatus","setSubmitting","success","variant","action","Button","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Grid","container","spacing","item","md","xs","TextField","error","Boolean","fullWidth","helperText","label","onBlur","onChange","value","Typography","color","Switch","checked","edge","Box","mt","type","disabled","Header","Breadcrumbs","separator","fontSize","aria-label","Link","to","RouterLink","theme","backgroundColor","palette","background","dark","minHeight","paddingTop","CustomerEditView","isMountedRef","useState","setCustomer","getCustomer","useCallback","axios","get","then","response","data","Page","title","Container","maxWidth"],"mappings":"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","file":"static/js/36.5651ecbe.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\n\nexport default function useIsMountedRef() {\n  const isMounted = useRef(true);\n\n  useEffect(() => () => {\n    isMounted.current = false;\n  }, []);\n\n  return isMounted;\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","export const wait = (time) => new Promise((res) => setTimeout(res, time));\n\nexport default wait;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport wait from 'src/utils/wait';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction CustomerEditForm({\n  className,\n  customer,\n  ...rest\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  return (\n    <Formik\n      initialValues={{\n        address1: customer.address1 || '',\n        address2: customer.address2 || '',\n        country: customer.country || '',\n        discountedPrices: customer.discountedPrices || false,\n        email: customer.email || '',\n        fullName: customer.fullName || '',\n        phone: customer.phone || '',\n        state: customer.state || '',\n        verified: customer.verified || false\n      }}\n      validationSchema={Yup.object().shape({\n        address1: Yup.string().max(255),\n        address2: Yup.string().max(255),\n        country: Yup.string().max(255),\n        discountedPrices: Yup.bool(),\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        fullName: Yup.string().max(255).required('Name is required'),\n        phone: Yup.string().max(15),\n        state: Yup.string().max(255),\n        verified: Yup.bool()\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          // Make API request\n          await wait(500);\n          resetForm();\n          setStatus({ success: true });\n          setSubmitting(false);\n          enqueueSnackbar('Customer updated', {\n            variant: 'success',\n            action: <Button>See all</Button>\n          });\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          className={clsx(classes.root, className)}\n          onSubmit={handleSubmit}\n          {...rest}\n        >\n\n          <Card>\n            <CardContent>\n\n              <Grid\n                container\n                spacing={3}\n              >\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.email && errors.email)}\n                    fullWidth\n                    helperText={touched.email && errors.email}\n                    label=\"Email address\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.email}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.fullName && errors.fullName)}\n                    fullWidth\n                    helperText={touched.fullName && errors.fullName}\n                    label=\"Full name\"\n                    name=\"fullName\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.fullName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.phone && errors.phone)}\n                    fullWidth\n                    helperText={touched.phone && errors.phone}\n                    label=\"Phone number\"\n                    name=\"phone\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.phone}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.state && errors.state)}\n                    fullWidth\n                    helperText={touched.state && errors.state}\n                    label=\"State/Region\"\n                    name=\"state\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.state}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.country && errors.country)}\n                    fullWidth\n                    helperText={touched.country && errors.country}\n                    label=\"Country\"\n                    name=\"country\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.country}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.address1 && errors.address1)}\n                    fullWidth\n                    helperText={touched.address1 && errors.address1}\n                    label=\"Address 1\"\n                    name=\"address1\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.address1}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.address2 && errors.address2)}\n                    fullWidth\n                    helperText={touched.address2 && errors.address2}\n                    label=\"Address 2\"\n                    name=\"address2\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.address2}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item />\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h5\"\n                    color=\"textPrimary\"\n                  >\n                    Email Verified\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    Disabling this will automatically send the user a verification\n                    email\n                  </Typography>\n                  <Switch\n                    checked={values.verified}\n                    color=\"secondary\"\n                    edge=\"start\"\n                    name=\"verified\"\n                    onChange={handleChange}\n                    value={values.verified}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h5\"\n                    color=\"textPrimary\"\n                  >\n                    Discounted Prices\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    This will give the user discountedprices for all products\n                  </Typography>\n                  <Switch\n                    checked={values.discountedPrices}\n                    color=\"secondary\"\n                    edge=\"start\"\n                    name=\"discountedPrices\"\n                    onChange={handleChange}\n                    value={values.discountedPrices}\n                  />\n                </Grid>\n              </Grid>\n              <Box mt={2}>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                >\n                  Update Customer\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nCustomerEditForm.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.object.isRequired\n};\n\nexport default CustomerEditForm;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Breadcrumbs,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Header({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Breadcrumbs\n        separator={<NavigateNextIcon fontSize=\"small\" />}\n        aria-label=\"breadcrumb\"\n      >\n        <Link\n          variant=\"body1\"\n          color=\"inherit\"\n          to=\"/app\"\n          component={RouterLink}\n        >\n          Dashboard\n        </Link>\n        <Link\n          variant=\"body1\"\n          color=\"inherit\"\n          to=\"/app/management\"\n          component={RouterLink}\n        >\n          Management\n        </Link>\n        <Typography\n          variant=\"body1\"\n          color=\"textPrimary\"\n        >\n          Customers\n        </Typography>\n      </Breadcrumbs>\n      <Typography\n        variant=\"h3\"\n        color=\"textPrimary\"\n      >\n        Edit Customer\n      </Typography>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, {\n  useState,\n  useCallback,\n  useEffect\n} from 'react';\nimport {\n  Box,\n  Container,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport Page from 'src/components/Page';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport CustomerEditForm from './CustomerEditForm';\nimport Header from './Header';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nfunction CustomerEditView() {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [customer, setCustomer] = useState();\n\n  const getCustomer = useCallback(() => {\n    axios\n      .get('/api/management/customers/1')\n      .then((response) => {\n        if (isMountedRef.current) {\n          setCustomer(response.data.customer);\n        }\n      });\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getCustomer();\n  }, [getCustomer]);\n\n  if (!customer) {\n    return null;\n  }\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Customer Edit\"\n    >\n      <Container maxWidth=\"lg\">\n        <Header />\n        <Box mt={3}>\n          <CustomerEditForm customer={customer} />\n        </Box>\n      </Container>\n    </Page>\n  );\n}\n\nexport default CustomerEditView;\n"],"sourceRoot":""}